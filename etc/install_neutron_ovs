#!/bin/bash
#log function

if [  -e $PWD/lib/newton-log ]
then	
	source $PWD/lib/newton-log
else
	echo -e "\033[41;37m $PWD/lib/newton-log is not exist. \033[0m"
	exit 1
fi

#input variable
if [  -e $PWD/lib/installrc ]
then	
	source $PWD/lib/installrc 
else
	echo -e "\033[41;37m $PWD/lib/installrc is not exist. \033[0m"
	exit 1
fi

if [  -e $PWD/lib/SaveRandPasswd ]
then	
	source $PWD/lib/SaveRandPasswd 
else
	echo -e "\033[41;37m $PWD/lib/SaveRandPasswd is not exist. \033[0m"
	exit 1
fi

if [  -e /etc/openstack-newton_tag/computer.tag  ]
then
	echo -e "\033[41;37m Oh no ! you can't execute this script on computer node.  \033[0m"
	log_error "Oh no ! you can't execute this script on computer node. "
	exit 1 
fi

if [ -f  /etc/openstack-newton_tag/install_cinder.tag ]
then 
	log_info "cinder have installed ."
else
	echo -e "\033[41;37m you should install cinder first. \033[0m"
	exit 1
fi

if [ -f  /etc/openstack-newton_tag/install_neutron.tag ]
then 
	echo -e "\033[41;37m you haved install neutron \033[0m"
	log_info "you haved install neutron."	
	exit
fi

#create neutron databases 
function  fn_create_neutron_database () {
mysql -uroot -p${MARIADB_PASSWORD} -e "CREATE DATABASE neutron;" &&  \
mysql -uroot -p${MARIADB_PASSWORD} -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY '${NEUTRON_PASSWORD}';" && \
mysql -uroot -p${MARIADB_PASSWORD} -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY '${NEUTRON_PASSWORD}';" 
fn_log "create  database neutron"
}
mysql -uroot -p${MARIADB_PASSWORD} -e "show databases ;" >test 
DATABASENEUTRON=`cat test | grep neutron`
rm -rf test 
if [ ${DATABASENEUTRON}x = neutronx ]
then
	log_info "neutron database had installed."
else
	fn_create_neutron_database
fi

source /root/admin-openrc.sh
USER_NEUTRON=`openstack user list | grep neutron | awk -F "|" '{print$3}' | awk -F " " '{print$1}'`
if [ ${USER_NEUTRON}x = neutronx ]
then
	log_info "openstack user had created  neutron"
else
	openstack user create --domain default  neutron  --password ${NEUTRON_PASSWORD}
	fn_log "openstack user create neutron  --password ${NEUTRON_PASSWORD}"
	openstack role add --project service --user neutron admin
	fn_log "openstack role add --project service --user neutron admin"
fi

SERVICE_NEUTRON=`openstack service list | grep neutron | awk -F "|" '{print$3}' | awk -F " " '{print$1}'`
if [  ${SERVICE_NEUTRON}x = neutronx ]
then 
	log_info "openstack service create neutron."
else
	openstack service create --name neutron --description "OpenStack Networking" network
	fn_log "openstack service create --name neutron --description "OpenStack Networking" networ"
fi

ENDPOINT_LIST_INTERNAL=`openstack endpoint list  | grep network  |grep internal | wc -l`
ENDPOINT_LIST_provider=`openstack endpoint list | grep network   |grep provider | wc -l`
ENDPOINT_LIST_ADMIN=`openstack endpoint list | grep network   |grep admin | wc -l`
if [  ${ENDPOINT_LIST_INTERNAL}  -eq 0  ]  && [ ${ENDPOINT_LIST_provider}  -eq  0   ] &&  [ ${ENDPOINT_LIST_ADMIN} -eq 0  ]
then
	openstack endpoint create --region ${REGION_NAME}   network public http://${HOST_NAME}:9696  &&   \
	openstack endpoint create --region ${REGION_NAME}   network internal http://${HOST_NAME}:9696 &&   \
	openstack endpoint create --region ${REGION_NAME}   network admin http://${HOST_NAME}:9696
	fn_log "openstack endpoint create --region ${REGION_NAME}   network provider http://${HOST_NAME}:9696  &&   openstack endpoint create --region ${REGION_NAME}   network internal http://${HOST_NAME}:9696 &&   openstack endpoint create --region ${REGION_NAME}   network admin http://${HOST_NAME}:9696"
else	
	log_info "openstack endpoint create neutron."
fi

#test network
function fn_test_network () {
if [ -f $PWD/lib/proxy.sh ]
then 
	source  $PWD/lib/proxy.sh
fi
curl www.baidu.com >/dev/null   
fn_log "curl www.baidu.com >/dev/null "
}

if  [ -f /etc/yum.repos.d/newton.repo ]
then
	log_info " use local yum."
else 
	fn_test_network
fi

function fn_install_neutron () {
yum clean all && yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-openvswitch  python-neutronclient ebtables ipset -y
fn_log "yum clean all && yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-openvswitch  python-neutronclient ebtables ipset -y"
}
OPENSTACKNEUTRON_COUNT=`rpm -aq | grep openstack-neutron* | wc -l`
if [ $OPENSTACKNEUTRON_COUNT -ne 0 ]
then
     log_info "openstack-neutron* had installed."
else
     fn_install_neutron
fi

[ -f /etc/neutron/neutron.conf_bak ] || cp -a  /etc/neutron/neutron.conf{,_bak} 
openstack-config --set  /etc/neutron/neutron.conf database connection mysql+pymysql://neutron:${NEUTRON_PASSWORD}@${HOST_NAME}/neutron &&   \
openstack-config --set  /etc/neutron/neutron.conf DEFAULT core_plugin  ml2  &&   \
openstack-config --set  /etc/neutron/neutron.conf DEFAULT service_plugins router  &&   \
openstack-config --set  /etc/neutron/neutron.conf DEFAULT allow_overlapping_ips  True  &&   \
openstack-config --set  /etc/neutron/neutron.conf DEFAULT transport_url rabbit://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${HOST_NAME}  &&   \
openstack-config --set  /etc/neutron/neutron.conf DEFAULT auth_strategy  keystone  &&   \
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken auth_uri  http://${HOST_NAME}:5000  &&   \
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken auth_url  http://${HOST_NAME}:35357  
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken memcached_servers  ${HOST_NAME}:11211 &&   \
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken auth_type  password  &&   \
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken project_domain_name  Default  &&   \
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken user_domain_name  Default  &&   \
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken project_name  service  &&   \
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken username  neutron  &&   \
openstack-config --set  /etc/neutron/neutron.conf keystone_authtoken password  ${NEUTRON_PASSWORD}  &&   \
openstack-config --set  /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes  True  &&   \
openstack-config --set  /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes  True  &&   \
openstack-config --set  /etc/neutron/neutron.conf nova auth_url  http://${HOST_NAME}:35357  &&   \
openstack-config --set  /etc/neutron/neutron.conf nova auth_type  password  &&   \
openstack-config --set  /etc/neutron/neutron.conf nova project_domain_name  Default  &&   \
openstack-config --set  /etc/neutron/neutron.conf nova user_domain_name  Default  &&   \
openstack-config --set  /etc/neutron/neutron.conf nova region_name  ${REGION_NAME}  &&   \
openstack-config --set  /etc/neutron/neutron.conf nova project_name  service  &&   \
openstack-config --set  /etc/neutron/neutron.conf nova username  nova  &&   \
openstack-config --set  /etc/neutron/neutron.conf nova password  ${NOVA_PASSWORD}  &&   \
openstack-config --set  /etc/neutron/neutron.conf oslo_concurrency lock_path  /var/lib/neutron/tmp
fn_log "config /etc/neutron/neutron.conf "

[ -f /etc/neutron/plugins/ml2/ml2_conf.ini_bak ] || cp -a  /etc/neutron/plugins/ml2/ml2_conf.ini{,_bak}
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 type_drivers flat,vlan,vxlan &&   \
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 tenant_network_types vxlan &&   \
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 mechanism_drivers openvswitch,l2population &&   \
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 extension_drivers port_security &&   \
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_flat flat_networks provider &&   \
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_vxlan vni_ranges 1:1000 &&   \
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup firewall_driver iptables_hybrid
fn_log "config /etc/neutron/plugins/ml2/ml2_conf.ini"

#SECONF_ETH=${NET_DEVICE_NAME}
#FIRST_ETH_IP=${MANAGER_IP}
[ -f  /etc/neutron/plugins/ml2/openvswitch_agent.ini_bak ] || cp -a   /etc/neutron/plugins/ml2/openvswitch_agent.ini{,_bak} 
#openstack-config --set   /etc/neutron/plugins/ml2/openvswitch_agent.ini tenant_network_type vxlan
openstack-config --set   /etc/neutron/plugins/ml2/openvswitch_agent.ini ovs bridge_mappings provider:br-ex && \
openstack-config --set   /etc/neutron/plugins/ml2/openvswitch_agent.ini ovs tunnel_bridge br-tun && \
openstack-config --set   /etc/neutron/plugins/ml2/openvswitch_agent.ini ovs local_ip ${MANAGER_IP} && \
openstack-config --set   /etc/neutron/plugins/ml2/openvswitch_agent.ini agent l2_population True && \
openstack-config --set   /etc/neutron/plugins/ml2/openvswitch_agent.ini agent tunnel_types vxlan && \
openstack-config --set   /etc/neutron/plugins/ml2/openvswitch_agent.ini securitygroup firewall_driver iptables_hybrid
fn_log "config /etc/neutron/plugins/ml2/openvswitch_agent.ini"

[ -f   /etc/neutron/l3_agent.ini_bak ] || cp -a    /etc/neutron/l3_agent.ini{,_bak} 
openstack-config --set  /etc/neutron/l3_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.OVSInterfaceDriver
openstack-config --set  /etc/neutron/l3_agent.ini DEFAULT external_network_bridge
fn_log "config /etc/neutron/l3_agent.ini "

[ -f   /etc/neutron/dhcp_agent.ini_bak ] || cp -a    /etc/neutron/dhcp_agent.ini{,_bak} 
openstack-config --set  /etc/neutron/dhcp_agent.ini DEFAULT interface_driver openvswitch && \
openstack-config --set  /etc/neutron/dhcp_agent.ini DEFAULT dhcp_driver neutron.agent.linux.dhcp.Dnsmasq && \
openstack-config --set  /etc/neutron/dhcp_agent.ini DEFAULT enable_isolated_metadata  True && \
openstack-config --set  /etc/neutron/dhcp_agent.ini DEFAULT dnsmasq_config_file /etc/neutron/dnsmasq-neutron.conf
fn_log "config /etc/neutron/dhcp_agent.ini "

cat >/etc/neutron/dnsmasq-neutron.conf <<EOF
dhcp-option-force=26,1450
EOF

[ -f /etc/neutron/metadata_agent.ini_bak ] || cp -a  /etc/neutron/metadata_agent.ini /etc/neutron/metadata_agent.ini_bak && \
openstack-config --set  /etc/neutron/metadata_agent.ini  DEFAULT nova_metadata_ip  ${HOST_NAME}   && \
openstack-config --set  /etc/neutron/metadata_agent.ini  DEFAULT metadata_proxy_shared_secret  ${NEUTRON_METADATA_SHARED_PASSWORD} 
fn_log "config /etc/neutron/metadata_agent.ini"

openstack-config --set  /etc/nova/nova.conf  neutron url  http://${HOST_NAME}:9696 && \
openstack-config --set  /etc/nova/nova.conf  neutron auth_url  http://${HOST_NAME}:35357 && \
openstack-config --set  /etc/nova/nova.conf  neutron auth_type  password && \
openstack-config --set  /etc/nova/nova.conf  neutron project_domain_name  Default && \
openstack-config --set  /etc/nova/nova.conf  neutron user_domain_name  Default && \
openstack-config --set  /etc/nova/nova.conf  neutron region_name  ${REGION_NAME} && \
openstack-config --set  /etc/nova/nova.conf  neutron project_name service && \
openstack-config --set  /etc/nova/nova.conf  neutron username  neutron && \
openstack-config --set  /etc/nova/nova.conf  neutron password  ${NEUTRON_PASSWORD} && \
openstack-config --set  /etc/nova/nova.conf  neutron service_metadata_proxy  True && \
openstack-config --set  /etc/nova/nova.conf  neutron metadata_proxy_shared_secret  ${NEUTRON_METADATA_SHARED_PASSWORD}
fn_log "config /etc/nova/nova.conf"

rm -rf /etc/neutron/plugin.ini && ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini
fn_log "rm -rf /etc/neutron/plugin.ini && ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini"

su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
fn_log "su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron"

systemctl enable openvswitch
systemctl start openvswitch.service
ovs-vsctl add-br br-ex #创建一个br-ex网桥 
ovs-vsctl add-port br-ex ${NET_DEVICE_NAME} #将br-ex桥接到外网卡我这里是${NET_DEVICE_NAME}

systemctl restart openstack-nova-api.service
fn_log "systemctl restart openstack-nova-api.service"

systemctl enable neutron-server.service neutron-openvswitch-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service &&  systemctl start  neutron-server.service neutron-openvswitch-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service
fn_log "systemctl enable neutron-server.service neutron-openvswitch-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service &&  systemctl start  neutron-server.service neutron-openvswitch-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service"

#install LB
function fn_install_neutron_lbaas () {
yum clean all && yum -y install openstack-neutron-lbaas
fn_log "yum clean all && yum -y install openstack-neutron-lbaas"
}
NEUTRON_LBAAS_COUNT=`rpm -aq | grep openstack-neutron-lbaas | wc -l`
if [ $NEUTRON_LBAAS_COUNT -ne 0 ]
then
     log_info "openstack-neutron-lbaas had installed."
else
     fn_install_neutron_lbaas
fi

openstack-config --set /etc/neutron/lbaas_agent.ini DEFAULT interface_driver openvswitch
fn_log "openstack-config --set /etc/neutron/lbaas_agent.ini DEFAULT interface_driver openvswitch"

function fn_install_haproxy () {
yum clean all && yum -y install haproxy
fn_log "yum clean all && yum -y install haproxy"
}

HAPROXY_COUNT=`rpm -aq | grep haproxy | wc -l`
if [ $HAPROXY_COUNT -ne 0 ]
then
     log_info "haproxy had installed."
else
     fn_install_haproxy
fi

openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router,neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2
fn_log "openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router,neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2"

fn_config_neutron_lbaas () {
openstack-config --set /etc/neutron/neutron.conf service_providers service_provider LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default
fn_log "openstack-config --set /etc/neutron/neutron.conf service_providers service_provider LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default"
}
CONFIG_NEUTRON_LBS_COUNT=`grep LOADBALANCERV2 /etc/neutron/neutron.conf | wc -l`
if [ $CONFIG_NEUTRON_LBS_COUNT -ne 0 ]
then
     log_info "openstack-neutron-lbaas had configd."
else
     fn_config_neutron_lbaas
fi

neutron-db-manage --subproject neutron-lbaas upgrade head
fn_log "neutron-db-manage --subproject neutron-lbaas upgrade head"

function fn_install_neutron_lbaas_ui () {
yum clean all && yum install -y openstack-neutron-lbaas-ui
fn_log "yum clean all && yum install -y openstack-neutron-lbaas-ui"
}

NEUTRON_LBAAS_UI_COUNT=`rpm -aq | grep openstack-neutron-lbaas-ui | wc -l`
if [ $NEUTRON_LBAAS_UI_COUNT -ne 0 ]
then
     log_info "openstack-neutron-lbaas-ui had installed."
else
     fn_install_neutron_lbaas_ui
fi

cp -a /usr/lib/python2.7/site-packages/neutron_lbaas_dashboard/enabled/_1481_project_ng_loadbalancersv2_panel.py /usr/share/openstack-dashboard/openstack_dashboard/local/enabled/
fn_log "cp -a /usr/lib/python2.7/site-packages/neutron_lbaas_dashboard/enabled/_1481_project_ng_loadbalancersv2_panel.py  /usr/share/openstack-dashboard/openstack_dashboard/local/enabled/"
python /usr/share/openstack-dashboard/manage.py collectstatic --noinput && python /usr/share/openstack-dashboard/manage.py compress --force
fn_log "python /usr/share/openstack-dashboard/manage.py collectstatic --noinput && python /usr/share/openstack-dashboard/manage.py compress --force"
systemctl restart neutron-server httpd
fn_log "systemctl restart neutron-server httpd"

systemctl enable  neutron-lbaasv2-agent && systemctl start  neutron-lbaasv2-agent
fn_log "systemctl enable  neutron-lbaasv2-agent && systemctl start  neutron-lbaasv2-agent"

#install fwaas
function fn_install_neutron_fwaas () {
yum clean all && yum -y install openstack-neutron-fwaas
fn_log "yum clean all && yum -y install openstack-neutron-fwaas"
}

NEUTRON_FWAAS_COUNT=`rpm -aq | grep openstack-neutron-fwaas | wc -l`
if [ $NEUTRON_FWAAS_COUNT -ne 0 ]
then
     log_info "openstack-neutron-fwaas had installed."
else
     fn_install_neutron_fwaas
fi

openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router,neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2,firewall
fn_log "openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router,neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2,firewall"
sleep 3
function fn_config_neutron_fwaas () {
sed -i "1799a service_provider = FIREWALL:Iptables:neutron.agent.Linux.iptables_firewall.OVSHybridIptablesFirewallDriver:default" /etc/neutron/neutron.conf
fn_log "sed -i "1799a service_provider = FIREWALL:Iptables:neutron.agent.Linux.iptables_firewall.OVSHybridIptablesFirewallDriver:default" /etc/neutron/neutron.conf"
}

CONFIG_NEUTRON_FWAAS_COUNT=`grep FIREWALL /etc/neutron/neutron.conf | wc -l`
if [ $CONFIG_NEUTRON_FWAAS_COUNT -ne 0 ]
then
     log_info "openstack-neutron-fwaas had cofnigd."
else
     fn_config_neutron_fwaas
fi

openstack-config --set /etc/neutron/neutron.conf fwaas driver neutron.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver
fn_log "openstack-config --set /etc/neutron/neutron.conf fwaas driver neutron.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver"
openstack-config --set /etc/neutron/neutron.conf fwaas agent_version v1
fn_log "openstack-config --set /etc/neutron/neutron.conf fwaas agent_version v1"

function fn_config_iptables () {
sed -i "1804a driver=iptables" /etc/neutron/neutron.conf
fn_log "sed -i "1804a driver=iptables" /etc/neutron/neutron.conf"
}

CONFIG_IPTABLES_COUNT=`grep "iptables" /etc/neutron/neutron.conf | wc -l`
if [ $CONFIG_IPTABLES_COUNT -eq 10 ]
then
     log_info "openstack-neutron-fwaas had cofnigd."
else
     fn_config_iptables
fi

openstack-config --set /etc/neutron/neutron.conf fwaas enabled  True
fn_log "openstack-config --set /etc/neutron/neutron.conf fwaas enabled  True"
openstack-config --set /etc/neutron/fwaas_driver.ini fwaas driver neutron.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver
fn_log "openstack-config --set /etc/neutron/fwaas_driver.ini fwaas driver neutron.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver"
openstack-config --set /etc/neutron/fwaas_driver.ini fwaas enabled True
fn_log "openstack-config --set /etc/neutron/fwaas_driver.ini fwaas enabled True"
openstack-config --set /etc/neutron/l3_agent.ini AGENT extensions fwaas
fn_log "openstack-config --set /etc/neutron/l3_agent.ini AGENT extensions fwaas"
systemctl restart neutron-l3-agent
fn_log "systemctl restart neutron-l3-agent"
neutron-db-manage --subproject neutron-fwaas upgrade head
fn_log "neutron-db-manage --subproject neutron-fwaas upgrade head"
systemctl restart neutron-server httpd
fn_log "systemctl restart neutron-server httpd"

#install VPN
function fn_install_neutron_vpn () {
yum clean all && yum install -y openstack-neutron-vpnaas libreswan
fn_log "yum clean all && yum install -y openstack-neutron-vpnaas libreswan"
}

NEUTRON_VPNAAS_COUNT=`rpm -aq | grep openstack-neutron-vpnaas | wc -l`
if [ $NEUTRON_VPNAAS_COUNT -ne 0 ]
then
     log_info "openstack-neutron-vpnaas had installed."
else
     fn_install_neutron_vpn
fi

openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router,neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2,firewall,vpnaas
fn_log "openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router,neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2,firewall,vpnaas"
function fn_config_neutron_vpn () {
sed -i "1800a service_provider = VPN:openswan:neutron_vpnaas.services.vpn.service_drivers.ipsec.IPsecVPNDriver:default" /etc/neutron/neutron.conf
fn_log "sed -i "1800a service_provider = VPN:openswan:neutron_vpnaas.services.vpn.service_drivers.ipsec.IPsecVPNDriver:default" /etc/neutron/neutron.conf"
}

CONFIG_NEUTRON_VPN_COUNT=`grep VPN /etc/neutron/neutron.conf | wc -l`
if [ $CONFIG_NEUTRON_VPN_COUNT -ne 0 ]
then
     log_info "VPN had cofnigd."
else
     fn_config_neutron_vpn
fi

openstack-config --set  /etc/neutron/vpn_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.OVSInterfaceDriver
fn_log "openstack-config --set  /etc/neutron/vpn_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.OVSInterfaceDriver"
openstack-config --set  /etc/neutron/vpn_agent.ini vpnagent vpn_device_driver neutron_vpnaas.services.vpn.device_drivers.libreswan_ipsec.LibreSwanDriver
fn_log "openstack-config --set  /etc/neutron/vpn_agent.ini vpnagent vpn_device_driver neutron_vpnaas.services.vpn.device_drivers.libreswan_ipsec.LibreSwanDriver"
openstack-config --set  /etc/neutron/vpn_agent.ini ipsec ipsec_status_check_interval 60
fn_log "openstack-config --set  /etc/neutron/vpn_agent.ini ipsec ipsec_status_check_interval 60"

function fn_config_openswan () {
cat >>/usr/share/neutron/rootwrap/vpnaas.filters<<EOF
openswan: CommandFilter, ipsec, root
libreswan: CommandFilter, certutil, root
EOF
}
CONFIG_NEUTRON_VPN_COUNT=`grep openswan /usr/share/neutron/rootwrap/vpnaas.filters | wc -l`
if [ $CONFIG_NEUTRON_VPN_COUNT -ne 0 ]
then
     log_info "openswan had cofnigd."
else
     fn_config_openswan
fi
cd /var/run/pluto/ && ipsec pluto && cd -

ipsec setup start

neutron-db-manage --subproject neutron-vpnaas upgrade head
fn_log "neutron-db-manage --subproject neutron-vpnaas upgrade head"
systemctl restart neutron-server httpd
fn_log "systemctl restart neutron-server httpd"
systemctl enable neutron-vpn-agent
fn_log "systemctl enable neutron-vpn-agent"
systemctl restart neutron-vpn-agent
fn_log "systemctl restart neutron-vpn-agent"

source /root/admin-openrc.sh
neutron ext-list
fn_log "neutron ext-list"
openstack network agent list
fn_log "openstack network agent list"

source /root/demo-openrc.sh
KEYPAIR=`nova keypair-list | grep  mykey | awk -F " " '{print$2}'`
if [  ${KEYPAIR}x = mykeyx ]
then
	log_info "keypair had added."
else
	ssh-keygen -t dsa -f ~/.ssh/id_dsa -N ""
	fn_log "ssh-keygen -t dsa -f ~/.ssh/id_dsa -N """
	#openstack keypair create --public-key ~/.ssh/id_dsa.pub mykey
	#fn_log "openstack keypair create --public-key ~/.ssh/id_dsa.pub mykey"
fi

SECRULE=`openstack security group rule list default | grep 22 | awk -F " " '{print$8}'|tail -1 |awk -F ":" '{print$1}'`
if [ x${SECRULE} = x22 ]
then 
	log_info "port 22 and icmp had add to secgroup."
else
	openstack security group rule create --proto icmp default 
	fn_log "openstack security group rule create --proto icmp default "
	openstack security group rule create --proto tcp --dst-port 22 default
	fn_log "openstack security group rule create --proto tcp --dst-port 22 default"
fi

source /root/admin-openrc.sh
PUBLIC_NET=`neutron net-list | grep provider |wc -l`
if [ ${PUBLIC_NET}  -eq 0 ]
then
	neutron net-create --shared --provider:physical_network provider --provider:network_type flat provider
	fn_log "neutron net-create --shared --provider:physical_network provider --provider:network_type flat provider"
else
	log_info "provider net is exist."
fi

source /root/demo-openrc.sh
PRIVATE_NET=`neutron net-list | grep selfservice |wc -l`
if [ ${PRIVATE_NET}  -eq 0 ]
then
	neutron net-create selfservice
	fn_log "neutron net-create selfservice"
else
	log_info "selfservice net is exist."
fi

source /root/admin-openrc.sh
ROUTE_VALUE=`neutron net-show provider | grep router:external | awk -F " "  '{print$4}'`
if [ ${ROUTE_VALUE}x  = Truex  ]
then
	log_info "the value had changed."
else
	neutron net-update provider --router:external
	fn_log "neutron net-update provider --router:external"
fi

source /root/demo-openrc.sh
ROUTE_NU=`neutron router-list | grep router | wc -l`
if [ ${ROUTE_NU}  -eq 0 ]
then
	neutron router-create router
	fn_log "neutron router-create router"
	neutron router-gateway-set router provider
	fn_log "neutron router-gateway-set router provider"
else
	log_info "router had created."
fi

source /root/admin-openrc.sh
ip netns
fn_log "ip netns"
neutron router-port-list router
fn_log "neutron router-port-list router"

systemctl enable libvirtd.service openstack-nova-compute.service &&  systemctl restart libvirtd.service openstack-nova-compute.service 
fn_log "systemctl enable libvirtd.service openstack-nova-compute.service &&  systemctl start libvirtd.service openstack-nova-compute.service"

systemctl restart neutron-dhcp-agent  neutron-l3-agent  neutron-openvswitch-agent  neutron-metadata-agent neutron-server
fn_log "systemctl restart neutron-dhcp-agent  neutron-l3-agent  neutron-openvswitch-agent  neutron-metadata-agent neutron-server"

if  [ ! -d /etc/openstack-newton_tag ]
then 
	mkdir -p /etc/openstack-newton_tag  
fi

echo `date "+%Y-%m-%d %H:%M:%S"` >/etc/openstack-newton_tag/install_neutron.tag

echo -e "\033[32m #################################\033[0m"
echo -e "\033[32m ##  Install Neutron Sucessed. ###\033[0m"
echo -e "\033[32m #################################\033[0m"

















